{"version":3,"sources":["../src/index.ts"],"names":["async","require","Compiler","constructor","embark","options","logger","plugins","isCoverage","events","setCommandHandler","compile_contracts","bind","contractFiles","cb","length","compiledObject","compilerOptions","eachObject","getAvailableCompilers","extension","compilers","next","matchingFiles","filter","filesMatchingExtension","someLimit","compiler","someCb","call","err","compileResult","result","Error","__","f","compiled","forEach","file","warn","path","available_compilers","getPluginsProperty","compilerObject","unshift","fileMatch","match","module","exports"],"mappings":"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","sourcesContent":["import {Callback, Embark, CompilerPluginObject, Plugins} from \"embark-typings\";\n\nconst async = require(\"./utils/async_extend.js\");\n\nclass Compiler {\n  private logger: any;\n  private plugins: Plugins;\n  private isCoverage: boolean;\n\n  constructor(embark: Embark, options: any) {\n    this.logger = embark.logger;\n    this.plugins = options.plugins;\n    this.isCoverage = options.isCoverage;\n\n    embark.events.setCommandHandler(\"compiler:contracts\", this.compile_contracts.bind(this));\n  }\n\n  private compile_contracts(contractFiles: any[], cb: any) {\n    if (contractFiles.length === 0) {\n      return cb(null, {});\n    }\n\n    const compiledObject: {[index: string]: any} = {};\n\n    const compilerOptions = {\n      isCoverage: this.isCoverage,\n    };\n\n    async.eachObject(this.getAvailableCompilers(),\n      (extension: string, compilers: any, next: any) => {\n        const matchingFiles = contractFiles.filter(this.filesMatchingExtension(extension));\n        if (matchingFiles.length === 0) {\n          return next();\n        }\n\n        async.someLimit(compilers, 1, (compiler: any, someCb: Callback<boolean>) => {\n          compiler.call(compiler, matchingFiles, compilerOptions, (err: any, compileResult: any) => {\n            if (err) {\n              return someCb(err);\n            }\n            if (compileResult === false) {\n              // Compiler not compatible, trying the next one\n              return someCb(null, false);\n            }\n            Object.assign(compiledObject, compileResult);\n            someCb(null, true);\n          });\n        }, (err: Error, result: boolean) => {\n          if (err) {\n            return next(err);\n          }\n          if (!result) {\n            // No compiler was compatible\n            return next(new Error(__(\"No installed compiler was compatible with your version of %s files\", extension)));\n          }\n          next();\n        });\n      },\n      (err: any) => {\n        contractFiles.filter((f: any) => !f.compiled).forEach((file: any) => {\n          this.logger.warn(__(\"%s doesn't have a compatible contract compiler. Maybe a plugin exists for it.\", file.path));\n        });\n\n        cb(err, compiledObject);\n      },\n    );\n  }\n\n  private getAvailableCompilers() {\n    const available_compilers: { [index: string]: any } = {};\n    this.plugins.getPluginsProperty(\"compilers\", \"compilers\").forEach((compilerObject: CompilerPluginObject) => {\n      if (!available_compilers[compilerObject.extension]) {\n        available_compilers[compilerObject.extension] = [];\n      }\n      available_compilers[compilerObject.extension].unshift(compilerObject.cb);\n    });\n    return available_compilers;\n  }\n\n  private filesMatchingExtension(extension: string) {\n    return (file: any) => {\n      const fileMatch = file.path.match(/\\.[0-9a-z]+$/);\n      if (fileMatch && (fileMatch[0] === extension)) {\n        file.compiled = true;\n        return true;\n      }\n      return false;\n    };\n  }\n}\n\nmodule.exports = Compiler;\n"],"file":"index.js"}